<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Selection</title>
    <style>
        .grid-container {
            margin-top: 40px;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 10px;
            padding: 10px;
        }

        .image-checkbox {
            display: none;
            /* Hide the checkboxes */
        }

        .image-container {
            position: relative;
            /* Set position to relative to allow absolute positioning of child elements */
        }


        .image-container.checked::before {
            content: '';
            position: absolute;
            top: 10px;
            left: 10px;
            width: 30px;
            /* Adjust the width to your preference */
            height: 30px;
            /* Adjust the height to your preference */
            background: url('/checkmark.png') no-repeat center center;
            background-size: contain;
        }

        .grid-container-image {
            width: 100%;
            height: auto;
        }

        .grid-container-image {
            max-width: 400px;
            max-height: 400px;
        }

        #overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        #folder-list {
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            max-width: 80%;
            max-height: 80%;
            overflow-y: auto;
            padding: 20px;
        }

        .folder-item {
            padding: 10px;
            font-size: 18px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }

        .folder-item:hover {
            background-color: #f0f0f0;
        }

        #destination-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background-color: #f9f9f9;
            /* Background color to cover content underneath */
            padding: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            /* Optional: shadow for a bit of depth */
            z-index: 1000;
            /* Ensure the container stays on top of other elements */
        }

        #loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.75);
            z-index: 2000;
            /* Ensure the overlay is on top of other elements */
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #loading-text {
            font-size: 2em;
            color: white;
        }

        .mark-container {
            position: absolute;
            top: 10px;
            left: 20px;
            display: flex;
        }

        .checkmark,
        .x-mark {
            cursor: grab;
            width: 70px;
            height: 70px;
            margin: 0 50px;
        }

        .image-container.handled {
            filter: grayscale(100%);
        }

        .image-container.handled .checkmark,
        .image-container.handled .x-mark {
            display: none;
        }

        .reset-button {
            display: none;
            position: absolute;
            bottom: 10px;
            left: 10px;
        }

        .image-container.handled .reset-button {
            display: block;
        }
    </style>
</head>

<body>

    <div id="overlay">
        <div id="folder-list"></div>
    </div>
    <!-- <form action="/download" method="post" id="image-form"> -->
    <div id="destination-container">
        <label for="location">Save to:</label>
        <input type="text" id="location" name="location" required>
        <button type="submit" id="download-selected-button">Download Selected</button>
        <button id="download-all-button">Download All Images (Including not shown)</button>

        <label for="userID">User ID to Download (Leave blank to download your data):</label>
        <input type="text" id="userID" name="userID" required>
        <button type="submit" id="andGo-button">Load Images</button>

        <div><input type="checkbox" id="removeOnClick" name="removeOnClick" value="true" />Remove Image on Clicking
            Checkmark or X</div>
    </div>
    <!-- </form> -->

    <div class="grid-container">
        <% let index=0; let urlBase="https://cdn.midjourney.com/" ; let urlEnd="_384_N.webp" ; let
            googleUrlBase="https://storage.googleapis.com/dream-machines-output/" ;%>
            <% imageData.forEach((item)=> { %>
                <% for(let i=0; i < 4; i++){ %>
                    <div class="image-container" id="container-<%= index %>">
                        <img src="<%= urlBase + item.id + '/0_' + i + urlEnd %>" alt="<%= item.full_command %>"
                            loading="lazy" class="grid-container-image">
                        <div class="mark-container">
                            <img src="/checkmark.png" class="checkmark" onclick="handleCheck(<%= index %>)">
                            <img src="/x-mark.png" class="x-mark" onclick="handleX(<%= index %>)">
                        </div>
                        <input type="hidden" name="images[]" value="<%= googleUrlBase + item.id + '/0_' + i +'.png' %>"
                            id="image-<%= index %>" class="image-checkbox">
                        <button class="reset-button" onclick="handleReset(<%= index %>, this)"
                            id="reset-<%= index %>">Reset</button>
                    </div>
                    <% index++; %>
                        <% } %>
                            <% }); %>
    </div>
    <script>
        function handleCheck(index) {
            const removeOnClick = document.getElementById('removeOnClick').checked;
            const container = document.getElementById('container-' + index);
            if (container.classList.contains('handled')) return;

            const imageUrl = document.getElementById('image-' + index).value;
            fetch('/handle-check', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ imageUrl }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        container.classList.add('handled');
                        const resetButton = document.getElementById('reset-' + index);
                        resetButton.style.display = 'block';
                        if (removeOnClick) container.remove();
                    }
                });
        }


        function handleX(index) {
            const removeOnClick = document.getElementById('removeOnClick').checked;
            const container = document.getElementById('container-' + index);
            if (container.classList.contains('handled')) return;

            const imageUrl = document.getElementById('image-' + index).value;
            fetch('/handle-x', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ imageUrl }),
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        container.classList.add('handled');
                        const resetButton = document.getElementById('reset-' + index);
                        resetButton.style.display = 'block';
                        if (removeOnClick) container.remove();
                    }
                });
        }

        function handleReset(index, _this) {
            const container = document.getElementById('container-' + index);
            container.classList.remove('handled');
            _this.style.display = 'none';
            const imageUrl = document.getElementById('image-' + index).value;
            fetch('/handle-reset', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ imageUrl }),
            });
        }

        // Function to show the overlay
        function showOverlay() {
            const overlay = document.getElementById('overlay');
            overlay.style.display = 'flex';

            // Fetch the list of available folders from the server
            fetch('/available-folders')
                .then(response => response.json())
                .then(folders => {
                    const folderList = document.getElementById('folder-list');
                    folderList.innerHTML = '';  // Clear any existing list
                    folders.forEach(folder => {
                        const folderItem = document.createElement('div');
                        folderItem.className = 'folder-item';
                        folderItem.textContent = folder;
                        folderItem.onclick = () => {
                            document.getElementById('location').value = folder;
                            overlay.style.display = 'none';  // Hide the overlay when a folder is selected
                        };
                        folderList.appendChild(folderItem);
                    });
                });
        }

        // Attach the showOverlay function to the "Save to" input field
        document.getElementById('location').onclick = showOverlay;

        document.getElementById('download-all-button').addEventListener('click', () => {
            fetch('/download-all');
        });


        document.getElementById('download-selected-button').addEventListener('click', async () => {
            // TODO: all this code is useless. this should initiate a download of the selected images
            // on the server side using the list of images that has already been sent to the server.
            // once the images are downloaded, save a json file with the list of images and their
            // file paths.

            let images = [];
            const imageCheckboxes = document.querySelectorAll('.image-checkbox');

            let location = document.getElementById('location').value;
            let res = await fetch('/download-selected', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ images: images, location: location }),
            });
            console.log(res);
        });

        //   window.addEventListener('content-script', function(event) {
        //     console.log(event);  // Outputs: {greeting: 'hello from content script'}
        //   });
        //   window.postMessage({ type: 'FROM_PAGE', action:'ready' }, '*');

        // var port = chrome.runtime.connect({ name: "content-script" });

        // const waitSeconds = (s) => new Promise(resolve => setTimeout(resolve, 1000 * s));
        // const loop = async () => {
        //     while (true) {
        //         await waitSeconds(3);
        //         port.postMessage({ msg: 'totalJobs' }, (response) => {
        //             console.log(response);
        //         });
        //         // window.postMessage({type: 'FROM_PAGE', msg: 'totalJobs' }, '*');
        //         console.log('sent message');
        //     }
        // }
        // loop();

        document.getElementById("andGo-button").addEventListener("click", async () => {
            window.dispatchEvent(new CustomEvent('main-script-event', {detail: 'andGo'}));
        });
        

    </script>
</body>

</html>