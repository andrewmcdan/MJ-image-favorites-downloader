<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Selection</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: Arial, Helvetica, sans-serif;
            width: 100vw;
            height: 100vh;
        }

        #overlay {
            position: fixed;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100vw;
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        #overlay-text {
            color: white;
            font-size: 32px;
        }

        #navbar {
            background-color: #333;
            color: white;
            padding: 10px;
            text-align: center;
        }

        #navbar button {
            background-color: #707070;
            /* Green */
            border: none;
            color: white;
            padding: 7px 15px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            transition-duration: 0.4s;
            cursor: pointer;
        }

        #navbar button:hover {
            background-color: white;
            color: black;
            border: 2px solid #4CAF50;
        }
    </style>
</head>

<body>
    <div id="overlay">
        <div id="overlay-text">Connecting to extension...</div>
    </div>
    <nav id="navbar">
        <button id="update-metadata">Update Metadata on Server</button>
    </nav>
    <div id="image-container"></div>
    <script>
        const serverUrl = 'http://favorites-downloader.midjourney.com:3000';
        // connect to extension
        let thisWindowListenerID = "main-script-event-" + generateUUID();
        let channelReady = false;
        window.addEventListener(thisWindowListenerID + 'c', function (event) {
            console.log('message from content.js', event);
            if (event.detail == 'ok') {
                channelReady = true;
            }
        });
        const waitForChannel = async () => {
            console.log("Waiting for comm channel to content.js...");
            while (!channelReady) {
                window.dispatchEvent(new CustomEvent('main-script-initiator', { detail: thisWindowListenerID }));
                await waitSeconds(1);
            }
            console.log("Comm channel established");
        }
        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        const waitSeconds = (s) => {
            return new Promise(resolve => setTimeout(resolve, 1000 * s));
        };
        function removeOverlay() {
            const overlay = document.getElementById('overlay');
            overlay.style.display = 'none';
        }
        function getMetaDataAndSendToServer() {
            let metaData = null;
            let sent = -1;
            const getData = async (e) => {
                metaData = e.detail;
                window.removeEventListener(thisWindowListenerID + 'c', getData);
                let success = await fetch(serverUrl + '/imageData', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(metaData.thisUserJobsData)
                });
                success = await success.text();
                if (success == 'ok') {
                    sent = 1;
                } else {
                    sent = 0;
                }
            }
            window.addEventListener(thisWindowListenerID + 'c', getData);
            window.dispatchEvent(new CustomEvent(thisWindowListenerID + 'm', { detail: 'getThisUserJobsData' }));
            return new Promise((resolve, reject) => {
                setTimeout(reject, 1000 * 15); // timeout after 15 seconds
                // check if received every 500ms
                const check = () => {
                    if (sent == -1) { // not received yet
                        setTimeout(check, 500);
                    } else if (sent == 1) { // received, resolve
                        resolve();
                    } else if (sent == 0) { // not received, reject
                        reject();
                    }
                }
                check();
            });
        }
        document.getElementById('update-metadata').addEventListener('click', () => {
            // Your code to update metadata on the server goes here
            getMetaDataAndSendToServer().then(() => {
                alert('Metadata sent to server');
            }).catch(() => {
                alert('Error sending metadata to server');
            });
        });

        waitForChannel();
        removeOverlay();


    </script>
</body>

</html>